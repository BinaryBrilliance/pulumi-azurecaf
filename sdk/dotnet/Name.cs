// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace BinaryBrilliance.Azurecaf
{
    [AzurecafResourceType("azurecaf:index/name:Name")]
    public partial class Name : global::Pulumi.CustomResource
    {
        [Output("cleanInput")]
        public Output<bool?> CleanInput { get; private set; } = null!;

        [Output("name")]
        public Output<string?> ResourceName { get; private set; } = null!;

        [Output("passthrough")]
        public Output<bool?> Passthrough { get; private set; } = null!;

        [Output("prefixes")]
        public Output<ImmutableArray<string>> Prefixes { get; private set; } = null!;

        [Output("randomLength")]
        public Output<int?> RandomLength { get; private set; } = null!;

        [Output("randomSeed")]
        public Output<int?> RandomSeed { get; private set; } = null!;

        [Output("resourceType")]
        public Output<string?> ResourceType { get; private set; } = null!;

        [Output("resourceTypes")]
        public Output<ImmutableArray<string>> ResourceTypes { get; private set; } = null!;

        [Output("result")]
        public Output<string> Result { get; private set; } = null!;

        [Output("results")]
        public Output<ImmutableDictionary<string, string>> Results { get; private set; } = null!;

        [Output("separator")]
        public Output<string?> Separator { get; private set; } = null!;

        [Output("suffixes")]
        public Output<ImmutableArray<string>> Suffixes { get; private set; } = null!;

        [Output("useSlug")]
        public Output<bool?> UseSlug { get; private set; } = null!;


        /// <summary>
        /// Create a Name resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Name(string name, NameArgs? args = null, CustomResourceOptions? options = null)
            : base("azurecaf:index/name:Name", name, args ?? new NameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Name(string name, Input<string> id, NameState? state = null, CustomResourceOptions? options = null)
            : base("azurecaf:index/name:Name", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Name resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Name Get(string name, Input<string> id, NameState? state = null, CustomResourceOptions? options = null)
        {
            return new Name(name, id, state, options);
        }
    }

    public sealed class NameArgs : global::Pulumi.ResourceArgs
    {
        [Input("cleanInput")]
        public Input<bool>? CleanInput { get; set; }

        [Input("name")]
        public Input<string>? ResourceName { get; set; }

        [Input("passthrough")]
        public Input<bool>? Passthrough { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        [Input("randomLength")]
        public Input<int>? RandomLength { get; set; }

        [Input("randomSeed")]
        public Input<int>? RandomSeed { get; set; }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("resourceTypes")]
        private InputList<string>? _resourceTypes;
        public InputList<string> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<string>());
            set => _resourceTypes = value;
        }

        [Input("separator")]
        public Input<string>? Separator { get; set; }

        [Input("suffixes")]
        private InputList<string>? _suffixes;
        public InputList<string> Suffixes
        {
            get => _suffixes ?? (_suffixes = new InputList<string>());
            set => _suffixes = value;
        }

        [Input("useSlug")]
        public Input<bool>? UseSlug { get; set; }

        public NameArgs()
        {
        }
        public static new NameArgs Empty => new NameArgs();
    }

    public sealed class NameState : global::Pulumi.ResourceArgs
    {
        [Input("cleanInput")]
        public Input<bool>? CleanInput { get; set; }

        [Input("name")]
        public Input<string>? ResourceName { get; set; }

        [Input("passthrough")]
        public Input<bool>? Passthrough { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        [Input("randomLength")]
        public Input<int>? RandomLength { get; set; }

        [Input("randomSeed")]
        public Input<int>? RandomSeed { get; set; }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("resourceTypes")]
        private InputList<string>? _resourceTypes;
        public InputList<string> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<string>());
            set => _resourceTypes = value;
        }

        [Input("result")]
        public Input<string>? Result { get; set; }

        [Input("results")]
        private InputMap<string>? _results;
        public InputMap<string> Results
        {
            get => _results ?? (_results = new InputMap<string>());
            set => _results = value;
        }

        [Input("separator")]
        public Input<string>? Separator { get; set; }

        [Input("suffixes")]
        private InputList<string>? _suffixes;
        public InputList<string> Suffixes
        {
            get => _suffixes ?? (_suffixes = new InputList<string>());
            set => _suffixes = value;
        }

        [Input("useSlug")]
        public Input<bool>? UseSlug { get; set; }

        public NameState()
        {
        }
        public static new NameState Empty => new NameState();
    }
}
