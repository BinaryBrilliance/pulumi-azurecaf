// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace BinaryBrilliance.Azurecaf
{
    [AzurecafResourceType("azurecaf:index/namingConvention:NamingConvention")]
    public partial class NamingConvention : global::Pulumi.CustomResource
    {
        [Output("convention")]
        public Output<string?> Convention { get; private set; } = null!;

        [Output("maxLength")]
        public Output<int?> MaxLength { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("postfix")]
        public Output<string?> Postfix { get; private set; } = null!;

        [Output("prefix")]
        public Output<string?> Prefix { get; private set; } = null!;

        [Output("prefixes")]
        public Output<ImmutableArray<string>> Prefixes { get; private set; } = null!;

        [Output("resourceType")]
        public Output<string?> ResourceType { get; private set; } = null!;

        [Output("result")]
        public Output<string> Result { get; private set; } = null!;

        [Output("suffixes")]
        public Output<ImmutableArray<string>> Suffixes { get; private set; } = null!;


        /// <summary>
        /// Create a NamingConvention resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NamingConvention(string name, NamingConventionArgs? args = null, CustomResourceOptions? options = null)
            : base("azurecaf:index/namingConvention:NamingConvention", name, args ?? new NamingConventionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NamingConvention(string name, Input<string> id, NamingConventionState? state = null, CustomResourceOptions? options = null)
            : base("azurecaf:index/namingConvention:NamingConvention", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NamingConvention resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NamingConvention Get(string name, Input<string> id, NamingConventionState? state = null, CustomResourceOptions? options = null)
        {
            return new NamingConvention(name, id, state, options);
        }
    }

    public sealed class NamingConventionArgs : global::Pulumi.ResourceArgs
    {
        [Input("convention")]
        public Input<string>? Convention { get; set; }

        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("postfix")]
        public Input<string>? Postfix { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("suffixes")]
        private InputList<string>? _suffixes;
        public InputList<string> Suffixes
        {
            get => _suffixes ?? (_suffixes = new InputList<string>());
            set => _suffixes = value;
        }

        public NamingConventionArgs()
        {
        }
        public static new NamingConventionArgs Empty => new NamingConventionArgs();
    }

    public sealed class NamingConventionState : global::Pulumi.ResourceArgs
    {
        [Input("convention")]
        public Input<string>? Convention { get; set; }

        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("postfix")]
        public Input<string>? Postfix { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("result")]
        public Input<string>? Result { get; set; }

        [Input("suffixes")]
        private InputList<string>? _suffixes;
        public InputList<string> Suffixes
        {
            get => _suffixes ?? (_suffixes = new InputList<string>());
            set => _suffixes = value;
        }

        public NamingConventionState()
        {
        }
        public static new NamingConventionState Empty => new NamingConventionState();
    }
}
